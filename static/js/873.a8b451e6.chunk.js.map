{"version":3,"file":"static/js/873.a8b451e6.chunk.js","mappings":"+NACA,EAAuB,sBAAvB,EAAqD,uBAArD,EAAmF,sB,SCIpE,SAASA,IACrB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAKA,OAHAC,EAAAA,EAAAA,YAAU,YACPC,EAAAA,EAAAA,IAAsBN,GAASO,MAAK,SAAAC,GAAI,OAAIJ,EAAWI,EAAKC,cAC5D,CAACT,KAED,eAAIU,UAAWC,EAAf,SACIR,GAAWA,EAAQS,OACjBT,EAAQU,KAAI,SAAAC,GAAM,OACf,2BACG,gBAAIJ,UAAWC,EAAf,qBAAiCG,EAAOC,WACxC,cAAGL,UAAWC,EAAd,SAAuBG,EAAOE,YAFxBF,EAAOG,QAMnB,yE,+MCtBNC,EAAW,+BACXC,EAAS,mCAEFC,EAAU,kCAAhB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC0BC,MAAMF,EAAKC,GADrC,YACSE,EADT,QAEmBC,GAFnB,iCAGcD,EAASE,OAHvB,gDAIQC,QAAQC,OAAO,IAAIC,MAAM,cAJjC,2GAOO,SAASC,EAAcC,GAC3B,OAAOX,EAAuB,GAAD,OACvBH,EADuB,uCACgBC,EADhB,iBAC+Ba,IAIxD,SAASC,EAAiBC,GAAkB,IAAXF,EAAU,uDAAH,EAC5C,OAAOX,EAAuB,GAAD,OACvBH,EADuB,iCACUC,EADV,iCACyCe,EADzC,qCAC2EF,IAIpG,SAASG,EAAsBlB,GACnC,OAAOI,EAAuB,GAAD,OAAIH,EAAJ,kBAAsBD,EAAtB,oBAAoCE,IAG7D,SAASiB,EAAsBnB,GACnC,OAAOI,EAAuB,GAAD,OACvBH,EADuB,kBACLD,EADK,4BACiBE,EADjB,oBAKzB,SAASb,EAAsBW,GACnC,OAAOI,EAAuB,GAAD,OACvBH,EADuB,kBACLD,EADK,4BACiBE,EADjB","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetailsPage/Reviews/Reviews.module.css?a057","pages/MovieDetailsPage/Reviews/Reviews.js","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__9mdAf\",\"title\":\"Reviews_title__WMlr2\",\"text\":\"Reviews_text__9n+6F\"};","import { useState, useEffect } from 'react';\nimport { fetchMovieReviewsById } from '../../../services/movies-api';\nimport { useParams } from 'react-router-dom';\nimport s from './Reviews.module.css';\n\nexport default function Reviews() {\n   const { movieId } = useParams();\n   const [reviews, setReviews] = useState(null);\n\n   useEffect(() => {\n      fetchMovieReviewsById(movieId).then(date => setReviews(date.results));\n   }, [movieId]);\n   return (\n      <ul className={s.list}>\n         {reviews && reviews.length ? (\n            reviews.map(review => (\n               <li key={review.id}>\n                  <h2 className={s.title}>Author: {review.author}</h2>\n                  <p className={s.text}>{review.content}</p>\n               </li>\n            ))\n         ) : (\n            <li>We don`t have any reviews for this movie</li>\n         )}\n      </ul>\n   );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst MY_KEY = '2638d702e8992f774e165b094b88cb75';\n\nexport const URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n   const response = await fetch(url, config);\n   return response.ok\n      ? await response.json()\n      : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending(page) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/trending/movie/day?api_key=${MY_KEY}&page=${page}`\n   );\n}\n\nexport function fetchSearchMovie(query, page = 1) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/search/movie?api_key=${MY_KEY}&language=en-US&query=${query}&include_adult=false&page=${page}`\n   );\n}\n\nexport function fetchMovieDetailsById(id) {\n   return fetchWithErrorHandling(`${BASE_URL}/movie/${id}?api_key=${MY_KEY}`);\n}\n\nexport function fetchMovieCreditsById(id) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/movie/${id}/credits?api_key=${MY_KEY}&language=en-US`\n   );\n}\n\nexport function fetchMovieReviewsById(id) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${MY_KEY}&language=en-US`\n   );\n}\n"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviewsById","then","date","results","className","s","length","map","review","author","content","id","BASE_URL","MY_KEY","URL_IMG","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","page","fetchSearchMovie","query","fetchMovieDetailsById","fetchMovieCreditsById"],"sourceRoot":""}