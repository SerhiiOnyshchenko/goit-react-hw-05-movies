{"version":3,"file":"static/js/743.0367d399.chunk.js","mappings":"yOACA,EAAwB,gCAAxB,EAA+D,+BAA/D,EAAsG,gCAAtG,EAA6I,+BAA7I,EAAkL,8B,uCCQnK,SAASA,IACrB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAIA,OAHAC,EAAAA,EAAAA,YAAU,YACPC,EAAAA,EAAAA,IAAsBN,GAASO,KAAKH,KACpC,CAACJ,KAED,2BACIG,GACE,4BACG,iBAAKK,UAAWC,EAAhB,WACG,gBACGC,IACGP,EAAMQ,YACDC,EAAAA,GAAUT,EAAMQ,YAChBE,EAERC,IAAKX,EAAMY,OAASZ,EAAMa,KAC1BC,MAAM,SAET,iBAAKT,UAAWC,EAAhB,WACG,eAAID,UAAWC,EAAf,SAAyBN,EAAMY,OAASZ,EAAMa,QAC9C,eAAGR,UAAWC,EAAd,WACG,yCADH,IACyBN,EAAMe,iBAE/B,eAAGV,UAAWC,EAAd,WACG,uCADH,IACuBN,EAAMgB,iBAE7B,eAAGX,UAAWC,EAAd,WACG,mCAAe,IACdN,EAAMiB,OAAOC,KAAI,SAAAC,GAAI,OAAIA,EAAKN,QAAMO,KAAK,WAE7C,eAAGf,UAAWC,EAAd,WACG,oCADH,IACoBN,EAAMqB,QAD1B,YAGA,cAAGhB,UAAWC,EAAd,UACG,wCAEH,cAAGD,UAAWC,EAAd,SAAuBN,EAAMsB,kBAGnC,mBACA,iBAAKjB,UAAWC,EAAhB,WACG,SAAC,KAAD,CAASiB,GAAG,OAAZ,mBACA,SAAC,KAAD,CAASA,GAAG,UAAZ,yBAEH,sBAGH,SAACC,EAAA,EAAD,KAEH,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACG,SAAC,KAAD,W,+MC7DNC,EAAW,+BACXC,EAAS,mCAEFpB,EAAU,kCAAhB,SAEQqB,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC0BC,MAAMF,EAAKC,GADrC,YACSE,EADT,QAEmBC,GAFnB,iCAGcD,EAASE,OAHvB,gDAIQC,QAAQC,OAAO,IAAIC,MAAM,cAJjC,2GAOO,SAASC,IAAyB,IAAXC,EAAU,uDAAH,EAClC,OAAOX,EAAuB,GAAD,OACvBF,EADuB,qCACcC,EADd,iBAC6BY,IAItD,SAASC,EAAiBC,GAAkB,IAAXF,EAAU,uDAAH,EAC5C,OAAOX,EAAuB,GAAD,OACvBF,EADuB,iCACUC,EADV,iCACyCc,EADzC,4CACkFF,IAI3G,SAAStC,EAAsByC,GACnC,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBgB,EAAtB,oBAAoCf,IAG7D,SAASgB,EAAsBD,GACnC,OAAOd,EAAuB,GAAD,OACvBF,EADuB,kBACLgB,EADK,4BACiBf,EADjB,oBAKzB,SAASiB,EAAsBF,GACnC,OAAOd,EAAuB,GAAD,OACvBF,EADuB,kBACLgB,EADK,4BACiBf,EADjB,sB","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetailsPage/MovieDetailsPage.module.css?9108","pages/MovieDetailsPage/MovieDetailsPage.js","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie\":\"MovieDetailsPage_movie__ge9gn\",\"Info\":\"MovieDetailsPage_Info__a8scB\",\"title\":\"MovieDetailsPage_title__63V3V\",\"text\":\"MovieDetailsPage_text__vp0Sm\",\"nav\":\"MovieDetailsPage_nav__PAw0i\"};","import { Suspense } from 'react';\nimport { URL_IMG, fetchMovieDetailsById } from '../../services/movies-api';\nimport { useState, useEffect } from 'react';\nimport { useParams, Outlet, NavLink } from 'react-router-dom';\nimport s from './MovieDetailsPage.module.css';\nimport Loader from '../../components/Loader/Loader';\nimport NotFound from '../NotFound/NotFound';\nimport defaultImg from '../../images/default-movie.png';\n\nexport default function MovieDetailsPage() {\n   const { movieId } = useParams();\n   const [movie, setMovie] = useState(null);\n   useEffect(() => {\n      fetchMovieDetailsById(movieId).then(setMovie);\n   }, [movieId]);\n   return (\n      <div>\n         {movie ? (\n            <div>\n               <div className={s.movie}>\n                  <img\n                     src={\n                        movie.poster_path\n                           ? URL_IMG + movie.poster_path\n                           : defaultImg\n                     }\n                     alt={movie.title || movie.name}\n                     width=\"300\"\n                  />\n                  <div className={s.Info}>\n                     <h2 className={s.title}>{movie.title || movie.name}</h2>\n                     <p className={s.text}>\n                        <b>Release date:</b> {movie.release_date}\n                     </p>\n                     <p className={s.text}>\n                        <b>User Score:</b> {movie.vote_average}\n                     </p>\n                     <p className={s.text}>\n                        <b>Genres:</b>{' '}\n                        {movie.genres.map(genr => genr.name).join(' / ')}\n                     </p>\n                     <p className={s.text}>\n                        <b>Runtime:</b> {movie.runtime} min.\n                     </p>\n                     <p className={s.text}>\n                        <b>Overview:</b>\n                     </p>\n                     <p className={s.text}>{movie.overview}</p>\n                  </div>\n               </div>\n               <hr />\n               <nav className={s.nav}>\n                  <NavLink to=\"cast\">Cast</NavLink>\n                  <NavLink to=\"reviews\">Reviews</NavLink>\n               </nav>\n               <hr />\n            </div>\n         ) : (\n            <NotFound />\n         )}\n         <Suspense fallback={<Loader />}>\n            <Outlet />\n         </Suspense>\n      </div>\n   );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst MY_KEY = '2638d702e8992f774e165b094b88cb75';\n\nexport const URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n   const response = await fetch(url, config);\n   return response.ok\n      ? await response.json()\n      : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending(page = 1) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/trending/all/day?api_key=${MY_KEY}&page=${page}`\n   );\n}\n\nexport function fetchSearchMovie(query, page = 1) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/search/movie?api_key=${MY_KEY}&language=en-US&query=${query}&page=1&include_adult=false&page=${page}`\n   );\n}\n\nexport function fetchMovieDetailsById(id) {\n   return fetchWithErrorHandling(`${BASE_URL}/movie/${id}?api_key=${MY_KEY}`);\n}\n\nexport function fetchMovieCreditsById(id) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/movie/${id}/credits?api_key=${MY_KEY}&language=en-US`\n   );\n}\n\nexport function fetchMovieReviewsById(id) {\n   return fetchWithErrorHandling(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${MY_KEY}&language=en-US`\n   );\n}\n"],"names":["MovieDetailsPage","movieId","useParams","useState","movie","setMovie","useEffect","fetchMovieDetailsById","then","className","s","src","poster_path","URL_IMG","defaultImg","alt","title","name","width","release_date","vote_average","genres","map","genr","join","runtime","overview","to","NotFound","Suspense","fallback","Loader","BASE_URL","MY_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","page","fetchSearchMovie","query","id","fetchMovieCreditsById","fetchMovieReviewsById"],"sourceRoot":""}